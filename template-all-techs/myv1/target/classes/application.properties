spring.application.name=my-all-techs
spring.banner.location=classpath:/META-INF/banner.txt

## For Server
server.port = ${PORT:8080}
spring.profiles.active=${ACTIVE_PROFILE:dev}
spring.mvc.format.date-time=yyyy-MM-dd HH:mm:ss
server.error.include-stacktrace=never
server.tomcat.max-threads=300
server.tomcat.min-spare-threads=50
server.http2.enabled=true
server.compression.enabled=true
server.compression.mime-types=application/json
server.compression.min-response-size=1024


# Jackson
spring.jackson.property-naming-strategy=SNAKE_CASE
spring.jackson.serialization.write-dates-as-timestamps=false


## Data Source
# primary
spring.datasource.demo.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.demo.jdbc-url=jdbc:mysql://192.168.189.128:3306/demo

spring.datasource.demo.username=${DB_USERNAME:root}
spring.datasource.demo.password=${DB_PASSWORD:123}
spring.datasource.demo.minimum-idle=${DB_MIN_POOL_SIZE:1}
spring.datasource.demo.maximum-pool-size=${DB_MAX_POOL_SIZE:10}
spring.datasource.demo.idle-timeout=${DB_RO_IDLE_TIMEOUT:1200000}
spring.datasource.demo.connection-timeout=${DB_CONNECTION_TIMEOUT:10000}
spring.datasource.demo.max-lifetime=${DB_MAX_LIFETIME:3600000}
spring.datasource.demo.pool-name=${DB_POOL_NAME:Demo-HikariPool}

# read only
spring.datasource.demo-ro.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.demo-ro.jdbc-url=jdbc:mysql://192.168.189.128:3306/demo
spring.datasource.demo-ro.username=${DB_RO_USERNAME:root}
spring.datasource.demo-ro.password=${DB_RO_PASSWORD:123}
spring.datasource.demo-ro.minimum-idle=${DB_RO_MIN_POOL_SIZE:1}
spring.datasource.demo-ro.maximum-pool-size=${DB_RO_MAX_POOL_SIZE:10}
spring.datasource.demo-ro.idle-timeout=${DB_RO_IDLE_TIMEOUT:1200000}
spring.datasource.demo-ro.connection-timeout=${DB_RO_CONNECTION_TIMEOUT:10000}
spring.datasource.demo-ro.max-lifetime=${DB_RO_MAX_LIFETIME:3600000}
spring.datasource.demo-ro.pool-name=${DB_RO_POOL_NAME:Demo-RO-HikariPool}

#MongoDB
#spring.data.mongodb.uri=${DEMO_MONGO_URI:mongodb://root:root@localhost:27017/demo?authSource=admin}

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.ddl-auto=none
spring.jpa.generate-ddl=false
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect

spring.jpa.properties.hibernate.jdbc.batch_size=5


# Batch update for multiple tables in one transaction
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.batch_versioned_data=true

# Batch insert for multiple tables in one transaction
spring.jpa.properties.hibernate.order_inserts=true

# Generate statistics (Ex: check whether batch works)
spring.jpa.properties.hibernate.generate_statistics=false



# MongoDB
spring.data.mongodb.uri=mongodb://root:root@192.168.189.128:27017/demo?authSource=admin

# Redis
spring.cache.type=redis
spring.data.redis.database=10
spring.data.redis.host=192.168.189.128
spring.data.redis.port=6379


# Swagger
springdoc.api-docs.path=/api-docs


## Scheduler
com.mwu.myv1.scheduling.enabled=true
spring.task.scheduling.pool.size=5
mymv1.job.scan.failure.order=0 0 18 * * *


# Email
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=chwmwei@gmail.com
spring.mail.password=bnywbexdxferwbis
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true


# ElasticSearch
spring.elasticsearch.host=192.168.189.128
spring.elasticsearch.port=9200
spring.elasticsearch.connection-timeout=3s
spring.elasticsearch.socket-timeout=30s


# retry
retry.maxAttempts = ${MAX_ATTEMPTS_RETRY:3}
retry.backOffDelay = ${BACK_OFF_DELAY:50}

## Feign Client
# To enable logging, we need to set Spring Boot logging level to DEBUG for
# the class/package that contains our feign client
logging.level.com.example=${LOG_LEVEL:DEBUG}
# set the logging level for feign client. Notice that the above config was just to enable the logging.
spring.cloud.openfeign.client.config.default.logger-level=${FEIGN_LOG_LEVEL:FULL}
spring.cloud.openfeign.client.config.default.connect-timeout=${FEIGN_CONNECTION_TIMEOUT:5000}
spring.cloud.openfeign.client.config.default.read-timeout=${FEIGN_READ_TIMEOUT:10000}
spring.cloud.openfeign.micrometer.enabled=${FEIGN_MICROMETER_ENABLED:true}


# Resilience4j
resilience4j.circuitbreaker.instances.demo-feign-client.sliding-window-type=count_based
resilience4j.circuitbreaker.instances.demo-feign-client.sliding-window-size=4
resilience4j.circuitbreaker.instances.demo-feign-client.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.demo-feign-client.wait-duration-in-open-state=60s
resilience4j.circuitbreaker.instances.demo-feign-client.permitted-number-of-calls-in-half-open-state=2
resilience4j.circuitbreaker.instances.demo-feign-client.automatic-transition-from-open-to-half-open-enabled=true

resilience4j.ratelimiter.instances.getLastPost.register-health-indicator=true
resilience4j.ratelimiter.instances.getLastPost.limit-for-period=5
resilience4j.ratelimiter.instances.getLastPost.limit-refresh-period=60s
resilience4j.ratelimiter.instances.getLastPost.timeout-duration=1s


# Rate Limit
bucket4j.enabled=true
bucket4j.filters[0].cache-name=rate-limit-buckets
bucket4j.filters[0].strategy=first
bucket4j.filters[0].filter-order=50
bucket4j.filters[0].filter-method=servlet
bucket4j.filters[0].http-response-body={ "message": "Too many requests" }
bucket4j.filters[0].rate-limits[0].bandwidths[0].capacity=${RATE_LIMIT_CAPACITY:200}
bucket4j.filters[0].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[0].rate-limits[0].bandwidths[0].unit=minutes
bucket4j.filters[0].rate-limits[0].execute-condition=@Authenticator.getUserId() >= 0
bucket4j.filters[0].rate-limits[0].expression=@Authenticator.getUserId()


spring.main.web-application-type=${WEB_APPLICATION_TYPE:servlet}
management.endpoints.web.exposure.include=prometheus,health,info,metric
# WARN: Only disable if no Mail Server and ElasticSearch on local
management.health.elasticsearch.enabled=false
management.health.mail.enabled=false
management.health.circuitbreakers.enabled=true


# The provided configuration defines properties for sending a daily email report related to failure orders in a Java application
# Background Jobs
demo.email.daily-failure-order-report.template=templates/failure_order_report_template.html
demo.email.daily-failure-order-report.subject=Demo Subject Report
demo.email.daily-failure-order-report.from-address=hieupham@gmail.com
demo.email.daily-failure-order-report.to-address=phamduyhieuit@gmail.com
demo.email.daily-failure-order-report.cc-addresses=hieudepzai@gmail.com,hieudepzai2@gmail.com



# The provided configuration defines properties for integrating with the JSONPlaceholder API, a mock API commonly used for testing and prototyping. These properties are designed to make the integration flexible by allowing values to be overridden via environment variables, while also providing default values for local development or testing.
# Json placeholder client
jsonplaceholder-api-host=${JSON_SVC_HOST:https://jsonplaceholder.typicode.com/}
jsonplaceholder-api-path=${POST_ENDPOINT:posts}
jsonplaceholder-api-token-header=${POST_TOKEN_HEADER:apikey}
jsonplaceholder-api-key=${JSON_SVC_API_KEY:4V21NcmI0GHZ2xmdU4xbMDF3MjliTUZZZVdEZF}



# jwt authentication
com.mwu.myv1.jwtSecret=${DEMO_JWT_SECRET:HJDUFdOMmo4V21NcmI0GHZ2xmdU4xbMDF3MjliTUZZZVdEZFpzZ3U0Yke==}
com.mwu.myv1.jwtExpirationMs=${DEMO_EXPIRATION_MS:86400000}

# Zipkin
# send all trace requests to Zipkin server
management.tracing.sampling.probability=1
    management.zipkin.tracing.endpoint=${ZIPKIN_ENDPOINT:http://192.168.189.128:9411/api/v2/spans}

springdoc.swagger-ui.defaultModelsExpandDepth=-1

# Kafka config
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
kafka.consumer.config.group-id=${KAFKA_CONSUMER_CONFIG_GROUP_ID:demo_group_id}
kafka.consumer.messages.topic=${KAFKA_MESSAGE_TOPIC:dev-demo-topic}
kafka.consumer.messages.concurrency=${KAFKA_MESSAGE_CONCURRENCY:3}


# ActiveMQ
spring.activemq.broker-url=tcp://localhost:61616
spring.activemq.user=admin
spring.activemq.password=admin
spring.activemq.packages.trusted=java.time,java.lang,com.example.demo.infrastructure.msg_queue



spring.cloud.zookeeper.config.enabled=false
spring.cloud.zookeeper.config.import-check.enabled=false

verified_tokens=${VERIFIED_TOKENS:39489c18-7b74-11ec-90d6-0242ac120003,426e274a-7b74-11ec-90d6-0242ac120003}
